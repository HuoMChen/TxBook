map文件分析
=============

c语言存储区域
*************

1、代码段
    程序语句


2、数据
    已经初始化

        只读数据段(RO Data)

        已经初始化读写数据(RW Data)
            
            已初始化全局变量
            已经初始化的函数static

    未初始化

        未初始化数据段(.bss)

3、堆栈
    堆(heaap):程序员malloc和release

    栈(statk):在函数内部由编译器自动分配和释放
    
ARM程序
********

1、ARM程序的组成
    RO段(text)、RW段和ZI段(未初始化的数据),这些称为静态存储
    ZI对应C语言的.bss

2、ROM拷贝到RAM
    RW数据和ZI数据会

    Total RO  Size (Code + RO Data)               968004 ( 945.32kB)
    Total RW  Size (RW Data + ZI Data)            175320 ( 171.21kB)
    Total ROM Size (Code + RO Data + RW Data)     977676 ( 954.76kB)

text和data段都在可执行文件中（在嵌入式系统里一般是固化在镜像文件中），由系统从可执行文件中加载；

而bss段不在可执行文件中，由系统初始化

Flash=Code + RO Data + RW Data;

RAM= RW-data+ZI-data + 堆栈;

五、程序中段的使用

C语言中的全局区(静态区)，实际上对应着下述几个段：

只读数据段:RO Data

读写数据段：RW Data

未初始化数据段：BSS Data


在C语言的程序中，对变量的使用需要注意的问题

1、在函数体中定义的变量通常是在栈上，不需要在程序中进行管理，由编译器处理。

2、用malloc，calloc,realoc等分配分配内存的函数所分配的内存空间在堆上，程序必须保证在使用后使用后freee释放，否则会发生内存泄漏。

3、所有函数体外定义的是全局变量，加了static修饰符后的变量不管在函数内部或者外部存放在全局区(静态区)。

4、使用const定义的变量将放于程序的只读数据区。

mdk map文件
***********

通过仔细阅读.map文件，我们可以大致分为5个部分：

列出不同函数的调用关系

列出被MDK优化的冗余函数

列出局部标签和全局标签

列出映像文件的内存映射

列出映像文件的组件大小






