1.HEX 文件
---------------

1.1 用途
~~~~~~~~~~
Intel HEX文件是一个ASCII文本文件，其文本行遵循Intel HEX文件格式。
用于存储ROM或EEPROM的程序和数据。

1.2 格式
~~~~~~~~
每一行为一个记录，每个记录分为五个字段，这些字段按以下格式排列。

.. code-block:: c++

    :llaaaatt [dd ...] cc

相同字母表示同一字段，一个字母表示一个HEX。
    
* **:** 表示每行的开始
* **ll** 是记录长度字段，表示该记录的数据字节数 
* **aaaa** 是地址字段，表示记录中后续数据的起始地址。
* **tt** 是代表HEX记录类型的字段，可以是下列之一:
    * 00-数据记录
    * 01-文件结束记录
    * 02-扩展段地址记录
    * 04-扩展线性地址记录
    * 05-起始线性地址记录（仅限MDK-ARM）

* **dd** 是一个数据字段，表示一个字节的数据。一个记录可能有多个数据字节。记录中的数据字节数必须与 ll字段指定的数匹配 。
* **cc** 是表示记录校验和的校验和字段。校验和是通过将记录模256中所有十六进制数字对的值相加并取两者的补码来计算的。

1.3 实例
~~~~~~~~~
1.3.1 数据记录
~~~~~~~~~~~~~~
英特尔HEX文件由任意数量的以回车符和换行符终止的数据记录组成。数据记录如下：

.. code-block:: c++

    :10246200464C5549442050524F46494C4500464C33

* 10是记录中的数据字节数。
* 2462是要在内存中放置数据的地址。
* 00是记录类型00（数据记录）。
* 464C ... 464C是数据。
* 33是记录的校验和。

1.3.2 扩展线性地址记录
~~~~~~~~~~~~~~~~~~~~~~~

可以看出地址字段只有2个字节，最大只能表示64K的地址，如果要表示更大的地址该如何作？
比如要把单片机的程序写入0x0800 8000,如下:

首先用拓展线性地址记录来表示基地址0x0800 0000,线性地址记录中数据字段存放的是高16为地址(0800)，如下：

.. code-block:: c++

    :020000040800F2

* 02 表示记录数据字节数。
* 0000 对于拓展线性地址记录段，该直始终为0000
* 04 表示拓展新地址记录
* 0800 数据
* F2 校验和

数据记录中的地址字段存放的低16位的地址(8000),如下
:10800000E8E801206183000815EE0308018F0308EA

* 10 表示该记录由16个数据
* 8000 表示数据要存放在地址8000

1.3.3 起始线性地址记录
~~~~~~~~~~~~~~~~~~~~

起始线性地址记录指定应用程序的起始地址。这些记录包含完整的线性32位地址。
线性起始记录始终有四个数据字节，并显示如下：

.. code-block:: c++

    :0400000508008189E5

* 04是记录中的数据字节数。
* 0000是地址字段。对于起始线性地址记录，此字段始终为0000。
* 05是记录类型05（起始线性地址记录）。
* 0800 8189是应用程序的4字节线性起始地址。
* 2A是记录的校验和,计算为01h + NOT（04h + 00h + 00h + 05h + 00h + 00h + 00h + CDh）
0800 8189是main函数的入口地址

1.3.4 文件结束（EOF）记录
~~~~~~~~~~~~~~~~~~~~~~~~

英特尔HEX文件必须以文件结尾（EOF）记录结尾。该记录的记录类型字段中的值必须为01。
EOF记录始终显示如下：

.. code-block:: c++

    :00000001FF

* 00是记录中的数据字节数。
* 0000是要在内存中存储数据的地址。文件结束记录中的地址是没有意义的，将被忽略。典型的地址是0000h。
* 01是记录类型01（文件结束记录）。
* FF是记录的校验和，计算为01h + NOT（00h + 00h + 00h + 01h）。